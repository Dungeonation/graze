import json
import PIL
from PIL import Image 
from pathlib import Path
with open('scratchproject/project.json') as whatsinhere:
    gamecode = json.load(whatsinhere)
if ("objName" in gamecode):
    spritemetadata = "";
    soundmetadata = "";
    # Import Stage Sounds
    if ("sounds" in gamecode):
        print("Importing Stage sounds...")
        AllSounds = gamecode['sounds']
        soundamount = len(AllSounds)
        for i in range(soundamount):
            thesound = AllSounds[i]
            soundname = thesound['soundName']
            soundeyedee = thesound['soundID']
            soundmetadata += "    <sound>sound\snd_"+str(soundname)+"</sound>\n";
            with open('FinishedGame.gmx/sound/snd_'+str(soundname)+'.sound.gmx','x') as f:
                f.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<sound>\n  <kind>3</kind>\n  <extension>.wav</extension>\n  <origname>sound\\audio\\snd_"+str(soundname)+"</origname>\n  <effects>0</effects>\n  <volume>\n    <volume>1</volume>\n  </volume>\n  <pan>0</pan>\n  <bitRates>\n    <bitRate>192</bitRate>\n  </bitRates>\n  <sampleRates>\n    <sampleRate>44100</sampleRate>\n  </sampleRates>\n  <types>\n    <type>0</type>\n  </types>\n  <bitDepths>\n    <bitDepth>16</bitDepth>\n  </bitDepths>\n  <preload>-1</preload>\n  <data>snd_"+str(soundname)+".wav</data>\n  <compressed>1</compressed>\n  <streamed>0</streamed>\n  <uncompressOnLoad>0</uncompressOnLoad>\n  <audioGroup>0</audioGroup>\n</sound>")
            Path("scratchproject/"+str(soundeyedee)+".wav").rename("FinishedGame.gmx/sound/audio/snd_"+str(soundname)+".wav")
    # Import Stage Costumes
    if ("costumes" in gamecode):
        print("Importing Stage costumes...")
        AllCostumes = gamecode['costumes']
        costumeamount = len(AllCostumes)
        subimage = 0
        thecostume = AllCostumes[i]
        rotX = thecostume['rotationCenterX']
        rotY = thecostume['rotationCenterY']
        costumeID = thecostume['baseLayerID']
        img = PIL.Image.open("scratchproject/"+str(costumeID)+".png") 
        wid, hgt = img.size
        img.close()
        spritemetadata += "    <sprite>sprites\\spr_stage</sprite>\n";
        with open('FinishedGame.gmx/sprites/spr_stage.sprite.gmx','x') as f:
            f.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<sprite>\n  <type>0</type>\n  <xorig>"+str(rotX)+"</xorig>\n  <yorigin>"+str(rotY)+"</yorigin>\n  <colkind>1</colkind>\n  <coltolerance>0</coltolerance>\n  <sepmasks>0</sepmasks>\n  <bboxmode>0</bboxmode>\n  <bbox_left>0</bbox_left>\n  <bbox_right>"+str(wid-1)+"</bbox_right>\n  <bbox_top>0</bbox_top>\n  <bbox_bottom>"+str(hgt-1)+"</bbox_bottom>\n  <HTile>0</HTile>\n  <VTile>0</VTile>\n  <TextureGroups>\n    <TextureGroup0>0</TextureGroup0>\n  </TextureGroups>\n  <For3D>0</For3D>\n  <width>960</width>\n  <height>720</height>\n  <frames>\n")
        for i in range(costumeamount):
            thecostume = AllCostumes[i]
            costumeID = thecostume['baseLayerID']
            with open('FinishedGame.gmx/sprites/spr_stage.sprite.gmx','a') as f:
                f.write("    <frame index=\""+str(subimage)+"\">images\\spr_stage_"+str(subimage)+".png</frame>\n")
            Path("scratchproject/"+str(costumeID)+".png").rename("FinishedGame.gmx/sprites/images/spr_stage_"+str(subimage)+".png")
            subimage += 1
            with open('FinishedGame.gmx/sprites/spr_stage.sprite.gmx','a') as f:
                f.write("  </frames>\n</sprite>")
        # Set Global Stage Variables
    if ("variables" in gamecode):
        print("Setting Stage Variables...")
        GlobalVariables = gamecode['variables']
        varamount = len(GlobalVariables)
        for i in range(varamount):
            variable = GlobalVariables[i]
            varname = "global.var_"+variable['name']
            varvalue = variable['value']
            varcode = varname+" = "+str(varvalue)+";\n"
            with open('FinishedGame.gmx/scripts/establishVariables.gml','a') as f:
                f.write(varcode)
        # Other Sprite Time!
        AllObjects = gamecode['children']
        ObjectAmount = len(AllObjects)
        for i in range(ObjectAmount):
            if 'target' not in AllObjects[i]:#this wont trip up by having a sprite or sound in Scratch be named "target" will it?
                CurrentObject = AllObjects[i]
                # Import Sounds
                if ("sounds" in CurrentObject):
                    print("Importing '"+str(CurrentObject['objName'])+"' sounds...")
                    AllSounds = CurrentObject['sounds']
                    soundamount = len(AllSounds)
                    for i in range(soundamount):
                        thesound = AllSounds[i]
                        soundname = thesound['soundName']
                        soundeyedee = thesound['soundID']
                        dapath = Path('scratchproject/'+str(soundeyedee)+'.wav')
                        if not (dapath.exists()):
                            print (str(soundeyedee)+'.wav already exists, ignoring')
                        if (dapath.exists()):
                            soundmetadata += "    <sound>sound\snd_"+str(soundname)+"</sound>\n";
                            with open('FinishedGame.gmx/sound/snd_'+str(soundname)+'.sound.gmx','a') as f:
                                f.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<sound>\n  <kind>3</kind>\n  <extension>.wav</extension>\n  <origname>sound\\audio\\snd_"+str(soundname)+"</origname>\n  <effects>0</effects>\n  <volume>\n    <volume>1</volume>\n  </volume>\n  <pan>0</pan>\n  <bitRates>\n    <bitRate>192</bitRate>\n  </bitRates>\n  <sampleRates>\n    <sampleRate>44100</sampleRate>\n  </sampleRates>\n  <types>\n    <type>0</type>\n  </types>\n  <bitDepths>\n    <bitDepth>16</bitDepth>\n  </bitDepths>\n  <preload>-1</preload>\n  <data>snd_"+str(soundname)+".wav</data>\n  <compressed>1</compressed>\n  <streamed>0</streamed>\n  <uncompressOnLoad>0</uncompressOnLoad>\n  <audioGroup>0</audioGroup>\n</sound>")
                            Path("scratchproject/"+str(soundeyedee)+".wav").rename("FinishedGame.gmx/sound/audio/snd_"+str(soundname)+".wav")
                # Import Costumes
                if ("costumes" in CurrentObject):
                    print("Importing '"+str(CurrentObject['objName'])+"' costumes...")
                    AllCostumes = CurrentObject['costumes']
                    costumeamount = len(AllCostumes)
                    subimage = 0
                    spritemetadata += "    <sprite>sprites\\spr_"+str(CurrentObject['objName'])+"</sprite>\n";
                    for i in range(costumeamount):
                        thecostume = AllCostumes[i]
                        rotX = thecostume['rotationCenterX']
                        rotY = thecostume['rotationCenterY']
                        costumeID = thecostume['baseLayerID']
                        dapath = Path('scratchproject/'+str(costumeID)+'.png')
                        if not (dapath.exists()):
                            print (str(costumeID)+'.png already exists, ignoring')
                        if (dapath.exists()):
                            img = PIL.Image.open("scratchproject/"+str(costumeID)+".png")
                            wid, hgt = img.size
                            img.close()
                            if (subimage == 0):
                                with open('FinishedGame.gmx/sprites/spr_'+str(CurrentObject['objName'])+'.sprite.gmx','a') as f:
                                    f.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<sprite>\n  <type>0</type>\n  <xorig>"+str(rotX)+"</xorig>\n  <yorigin>"+str(rotY)+"</yorigin>\n  <colkind>1</colkind>\n  <coltolerance>0</coltolerance>\n  <sepmasks>0</sepmasks>\n  <bboxmode>0</bboxmode>\n  <bbox_left>0</bbox_left>\n  <bbox_right>"+str(wid-1)+"</bbox_right>\n  <bbox_top>0</bbox_top>\n  <bbox_bottom>"+str(hgt-1)+"</bbox_bottom>\n  <HTile>0</HTile>\n  <VTile>0</VTile>\n  <TextureGroups>\n    <TextureGroup0>0</TextureGroup0>\n  </TextureGroups>\n  <For3D>0</For3D>\n  <width>"+str(wid)+"</width>\n  <height>"+str(hgt)+"</height>\n  <frames>\n")
                                with open('FinishedGame.gmx/sprites/spr_'+str(CurrentObject['objName'])+'.sprite.gmx','a') as f:
                                    f.write("    <frame index=\""+str(subimage)+"\">images\\spr_"+str(CurrentObject['objName'])+"_"+str(subimage)+".png</frame>\n")
                                Path("scratchproject/"+str(costumeID)+".png").rename("FinishedGame.gmx/sprites/images/spr_"+str(CurrentObject['objName'])+"_"+str(subimage)+".png")
                                subimage += 1
                            with open('FinishedGame.gmx/sprites/spr_'+str(CurrentObject['objName'])+'.sprite.gmx','a') as f:
                                f.write("  </frames>\n</sprite>")
                # Start to make Object XML
                objectmetadata = "<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<object>\n  <spriteName>spr_"+str(CurrentObject['objName'])+"</spriteName>\n  <solid>0</solid>\n  <visible>-1</visible>\n  <depth>0</depth>\n  <persistent>0</persistent>\n  <parentName>&lt;undefined&gt;</parentName>\n  <maskName>&lt;undefined&gt;</maskName>\n  <events>\n    "
                # Game Code, Baby (this stuff doesn't work right now D:)
                #greenflag = ""
                #if ("scripts" in CurrentObject):
                #    CurrentScripts = CurrentObject['scripts']
                #    ScriptAmount = len(CurrentScripts)
                #    for i in range (ScriptAmount):
                #        if ("whenGreenFlag" in CurrentScripts[i]):
                #            if (greenflag == ""):
                #                greenflag = "<event eventtype=\"0\" enumb=\"0\">\n      <action>\n        <libid>1</libid>\n        <id>603</id>\n        <kind>7</kind>\n        <userelative>0</userelative>\n        <isquestion>0</isquestion>\n        <useapplyto>-1</useapplyto>\n        <exetype>2</exetype>\n        <functionname></functionname>\n        <codestring></codestring>\n        <whoName>self</whoName>\n        <relative>0</relative>\n        <isnot>0</isnot>\n        <arguments>\n          <argument>\n            <kind>1</kind>\n            <string>"
                #            whatodo = CurrentScripts["whenGreenFlag"]
                #            whatodolength = len(whatodo)
                #            for e in range (whatodolength):
                #                if ("gotoX:y:" in whatodo[i]):
                #                    greenflag += ""
                #Write Object Metadata
                with open('FinishedGame.gmx/objects/obj_'+str(CurrentObject['objName'])+'.object.gmx','a') as f:
                    f.write(str(objectmetadata))
        #Rewrite Main Game Metadata
        with open ('FinishedGame.gmx/FinishedGame.project.gmx','w') as f:
            f.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n<assets>\n  <Configs name=\"configs\">\n    <Config>Configs\Default</Config>\n  </Configs>\n  <NewExtensions/>\n  <sounds name=\"sound\">\n"+str(soundmetadata)+"  </sounds>\n  <sprites name=\"sprites\">\n"+str(spritemetadata)+"  </sprites>\n  <backgrounds name=\"background\"/>\n  <paths name=\"paths\"/>\n  <scripts name=\"scripts\">\n    <script>scripts\establishVariables.gml</script>\n  </scripts>\n  <rooms name=\"rooms\">\n    <room>rooms\\rm_stage</room>\n  </rooms>\n  <help>\n    <rtf>help.rtf</rtf>\n  </help>\n  <TutorialState>\n    <IsTutorial>0</IsTutorial>\n    <TutorialName></TutorialName>\n    <TutorialPage>0</TutorialPage>\n  </TutorialState>\n</assets>")
        print("*DING* Done!")
else:
    print("ERROR: This Scratch project doesn't have a Stage from what we can tell. Is it a valid .sb2 file?")
input("Press Enter to close.")
